{"name":"Mina.NET","tagline":".NET implementation of Apache MINA","body":"Mina.NET\r\n========\r\n\r\n.NET implementation of [Apache MINA] (http://mina.apache.org/). I like the ideas in it, simple yet functional, but I failed to find one in .NET, finally I created one.\r\n\r\nMina.NET is a network application framework which helps users develop high performance and high scalability network applications easily. It provides an abstract event-driven asynchronous API over various transports such as TCP/IP via **async socket**.\r\n\r\nMina.NET is often called:\r\n\r\n* NIO framework library,\r\n* client server framework library, or\r\n* a networking socket library\r\n\r\nFeatures\r\n-----------\r\n\r\nMina.NET is a simple yet full-featured network application framework which provides:\r\n\r\n* Unified API for various transport types:\r\n  - TCP/IP async socket\r\n  - Serial communication (Working in progrss)\r\n  - You can implement your own!\r\n* Filter interface as an extension point;\r\n* Low-level and high-level API:\r\n  - Low-level: uses ByteBuffers\r\n  - High-level: uses user-defined message objects and codecs\r\n* Highly customizable thread model:\r\n  - Single thread\r\n  - One thread pool\r\n  - More than one thread pools\r\n* Out-of-the-box SSL Â· TLS\r\n* Overload shielding & traffic throttling\r\n* Stream-based I/O support via StreamIoHandler\r\n\r\nQuick Start\r\n-----------\r\n\r\n```csharp\r\n  IoAcceptor acceptor = new AsyncSocketAcceptor();\r\n\r\n  acceptor.FilterChain.AddLast(\"logger\", new LoggingFilter());\r\n  acceptor.FilterChain.AddLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Encoding.UTF8)));\r\n\r\n  acceptor.ExceptionCaught +=\r\n    (o, e) => Console.WriteLine(e.Exception);\r\n  \r\n  acceptor.SessionIdle +=\r\n    (o, e) => Console.WriteLine(\"IDLE \" + e.Session.GetIdleCount(e.IdleStatus));\r\n  \r\n  acceptor.MessageReceived += (o, e) =>\r\n  {\r\n    String str = e.Message.ToString();\r\n\r\n    // \"Quit\" ? let's get out ...\r\n    if (str.Trim().Equals(\"quit\", StringComparison.OrdinalIgnoreCase))\r\n    {\r\n      e.Session.Close(true);\r\n      return;\r\n    }\r\n\r\n    // Send the current date back to the client\r\n    e.Session.Write(DateTime.Now.ToString());\r\n    Console.WriteLine(\"Message written...\");\r\n  };\r\n  \r\n  acceptor.Bind(new IPEndPoint(IPAddress.Any, 8080));\r\n```\r\n\r\nSee http://mina.apache.org/mina-project/userguide/user-guide-toc.html for more.\r\n","google":"UA-44050658-3","note":"Don't delete this file! It's used internally to help with page regeneration."}